{"ast":null,"code":"import _toConsumableArray from \"/home/alex/Desktop/Web developer/JS/react/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/home/alex/Desktop/Web developer/JS/react/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/alex/Desktop/Web developer/JS/react/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/alex/Desktop/Web developer/JS/react/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/alex/Desktop/Web developer/JS/react/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/alex/Desktop/Web developer/JS/react/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/alex/Desktop/Web developer/JS/react/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/alex/Desktop/Web developer/JS/react/src/App.js\";\nimport React, { Component, Fragment } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport AddNewTask from './components/AddNewTask';\nimport TasksList from './components/TasksList';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      locale: \"en\",\n      appName: {\n        en: \"Task manager\",\n        ru: \"Менеджер задач\"\n      },\n      formName: \"Add new task\",\n      buttonName: \"Add new task\",\n      taskListName: \"Tasks list\",\n      tasks: [{\n        id: 1,\n        name: \"Wake up\",\n        isDone: false\n      }, {\n        id: 2,\n        name: \"Clean your teeth\",\n        isDone: false\n      }],\n      inputTaskName: \"\",\n      hasError: false,\n      tabsState: \"all\"\n    };\n\n    _this.filterTasksForShow = function (tasks) {\n      var tabsState = _this.state.tabsState;\n      return tasks.filter(function (el) {\n        return tabsState === \"all\" ? true : tabsState === \"active\" && !el.isDone ? true : tabsState === \"done\" && el.isDone ? true : false;\n      });\n    };\n\n    _this.changeTabs = function (tabStatus) {\n      console.log(\"changeTabs\");\n\n      _this.setState({\n        tabsState: tabStatus\n      });\n    };\n\n    _this.setDone = function (id) {\n      var tasks = _this.state.tasks;\n\n      _this.setState({\n        tasks: tasks.map(function (el) {\n          return el.id === id ? _objectSpread({}, el, {\n            isDone: true\n          }) : el;\n        })\n      });\n    };\n\n    _this.inputTaskNameHandler = function (e) {\n      var value = e.target.value;\n\n      _this.setState({\n        inputTaskName: value,\n        hasError: false\n      });\n    };\n\n    _this.submitCreateNewTask = function (e) {\n      e.preventDefault();\n      var taskName = _this.state.inputTaskName;\n\n      if (taskName.length > 3) {\n        _this.setState(function (state, props) {\n          return {\n            tasks: [].concat(_toConsumableArray(state.tasks), [{\n              id: state.tasks.length + 1,\n              name: taskName,\n              isDone: false\n            }])\n          };\n        });\n\n        _this.setState({\n          inputTaskName: \"\"\n        });\n      } else {\n        _this.setState({\n          hasError: true\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          locale = _this$state.locale,\n          appName = _this$state.appName,\n          formName = _this$state.formName,\n          buttonName = _this$state.buttonName,\n          taskListName = _this$state.taskListName,\n          tasks = _this$state.tasks,\n          inputTaskName = _this$state.inputTaskName,\n          hasError = _this$state.hasError,\n          tabsState = _this$state.tabsState;\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, React.createElement(Header, {\n        appName: appName,\n        locale: locale,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, React.createElement(AddNewTask, Object.assign({\n        formName: formName,\n        hasError: hasError,\n        inputTaskName: inputTaskName,\n        buttonName: buttonName,\n        inputTaskNameHandler: this.inputTaskNameHandler,\n        submitCreateNewTask: this.submitCreateNewTask\n      }, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"col-12 mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(\"ul\", {\n        className: \"nav nav-pills\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        className: \"nav-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        className: \"nav-link \".concat(tabsState === \"all\" ? \"active\" : \"\"),\n        href: \"#\",\n        onClick: function onClick() {\n          _this2.changeTabs(\"all\");\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \"All\")), React.createElement(\"li\", {\n        className: \"nav-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        className: \"nav-link \".concat(tabsState === \"active\" ? \"active\" : \"\"),\n        href: \"#\",\n        onClick: function onClick() {\n          _this2.changeTabs(\"active\");\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, \"Active\")), React.createElement(\"li\", {\n        className: \"nav-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        className: \"nav-link \".concat(tabsState === \"done\" ? \"active\" : \"\"),\n        href: \"#\",\n        onClick: function onClick() {\n          _this2.changeTabs(\"done\");\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, \"Done\")))), React.createElement(TasksList, {\n        taskListName: taskListName,\n        tasks: this.filterTasksForShow(tasks),\n        setDone: this.setDone,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport { App as default };\n;","map":{"version":3,"sources":["/home/alex/Desktop/Web developer/JS/react/src/App.js"],"names":["React","Component","Fragment","Header","AddNewTask","TasksList","App","state","locale","appName","en","ru","formName","buttonName","taskListName","tasks","id","name","isDone","inputTaskName","hasError","tabsState","filterTasksForShow","filter","el","changeTabs","tabStatus","console","log","setState","setDone","map","inputTaskNameHandler","e","value","target","submitCreateNewTask","preventDefault","taskName","length","props"],"mappings":"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","sourcesContent":["import React, { Component,Fragment } from 'react';\n\nimport './App.css';\n\nimport Header from './components/Header'\nimport AddNewTask from './components/AddNewTask'\nimport TasksList from './components/TasksList'\n\nexport default class App extends Component {\n\n    state = {\n        locale: \"en\",\n        appName: {en: \"Task manager\", ru: \"Менеджер задач\"},\n        formName: \"Add new task\",\n        buttonName: \"Add new task\",\n        taskListName: \"Tasks list\",\n        tasks: [\n            {id: 1, name:\"Wake up\", isDone:false},\n            {id: 2, name:\"Clean your teeth\", isDone:false},\n        ],\n        inputTaskName: \"\",\n        hasError: false,\n        tabsState: \"all\",\n    };\n\n    render(){\n        const { locale, appName, formName, buttonName, taskListName, tasks, inputTaskName, hasError, tabsState } = this.state;\n\n        return (\n            <Fragment>\n                <Header appName={appName} locale={locale}/>\n\n                <div className=\"container\">\n                    <div className=\"row\">\n\n                        <AddNewTask {...{\n                            formName,\n                            hasError,\n                            inputTaskName,\n                            buttonName,\n                            inputTaskNameHandler:this.inputTaskNameHandler,\n                            submitCreateNewTask:this.submitCreateNewTask\n                        }} />\n\n                        <div className=\"col-12 mb-3\">\n                            <ul className=\"nav nav-pills\">\n                                <li className=\"nav-item\">\n                                    <a className={`nav-link ${(tabsState === \"all\"?\"active\":\"\")}`} href=\"#\"\n                                       onClick={() => {this.changeTabs(\"all\")}}>All</a>\n                                </li>\n                                <li className=\"nav-item\">\n                                    <a className={`nav-link ${(tabsState === \"active\"?\"active\":\"\")}`} href=\"#\"\n                                       onClick={() => {this.changeTabs(\"active\")}}>Active</a>\n                                </li>\n                                <li className=\"nav-item\">\n                                    <a className={`nav-link ${(tabsState === \"done\"?\"active\":\"\")}`} href=\"#\"\n                                       onClick={() => {this.changeTabs(\"done\")}}>Done</a>\n                                </li>\n                            </ul>\n                        </div>\n\n                        <TasksList taskListName={taskListName} tasks={this.filterTasksForShow(tasks)} setDone={this.setDone}/>\n\n                    </div>\n                </div>\n            </Fragment>\n        );\n    }\n\n    filterTasksForShow = (tasks) => {\n        const {tabsState} = this.state;\n        return tasks.filter(el => tabsState === \"all\"?true:tabsState === \"active\" && !el.isDone?true:tabsState === \"done\" && el.isDone?true:false);\n    };\n\n    changeTabs = (tabStatus) => {\n        console.log(\"changeTabs\");\n\n        this.setState({\n            tabsState: tabStatus\n        })\n    };\n\n    setDone = (id) => {\n        const {tasks} = this.state;\n        this.setState({\n            tasks: tasks.map(el => el.id === id?{...el, isDone:true}:el)\n        });\n    };\n\n    inputTaskNameHandler = (e) => {\n        const {value} = e.target;\n\n        this.setState({\n            inputTaskName: value,\n            hasError: false\n        });\n    };\n\n    submitCreateNewTask = (e) => {\n        e.preventDefault();\n        const taskName = this.state.inputTaskName;\n\n        if(taskName.length > 3){\n            this.setState((state, props) => ({\n                tasks: [...state.tasks, {id:state.tasks.length+1, name: taskName, isDone:false}]\n            }));\n            this.setState({\n                inputTaskName: \"\"\n            });\n        }else {\n            this.setState({\n                hasError: true\n            });\n        }\n\n    };\n};"]},"metadata":{},"sourceType":"module"}