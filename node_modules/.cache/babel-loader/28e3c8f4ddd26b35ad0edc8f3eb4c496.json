{"ast":null,"code":"import _toConsumableArray from \"/home/alex/Desktop/Web developer/JS/react/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/home/alex/Desktop/Web developer/JS/react/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/alex/Desktop/Web developer/JS/react/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/alex/Desktop/Web developer/JS/react/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/alex/Desktop/Web developer/JS/react/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/alex/Desktop/Web developer/JS/react/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/alex/Desktop/Web developer/JS/react/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/alex/Desktop/Web developer/JS/react/src/App.js\";\nimport React, { Component, Fragment } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport AddNewTask from './components/AddNewTask';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      locale: \"en\",\n      appName: {\n        en: \"Task manager\",\n        ru: \"Менеджер задач\"\n      },\n      formName: \"Add new task\",\n      buttonName: \"Add new task\",\n      taskListName: \"Tasks list\",\n      tasks: [{\n        id: 1,\n        name: \"Wake up\",\n        isDone: false\n      }, {\n        id: 2,\n        name: \"Clean your teeth\",\n        isDone: false\n      }],\n      inputTaskName: \"\",\n      hasError: false\n    };\n\n    _this.setDone = function (id) {\n      var tasks = _this.state.tasks;\n\n      _this.setState({\n        tasks: tasks.map(function (el) {\n          return el.id === id ? _objectSpread({}, el, {\n            isDone: true\n          }) : el;\n        })\n      });\n    };\n\n    _this.inputTaskNameHandler = function (e) {\n      var value = e.target.value;\n\n      _this.setState({\n        inputTaskName: value,\n        hasError: false\n      });\n    };\n\n    _this.submitCreateNewTask = function (e) {\n      e.preventDefault();\n      var taskName = _this.state.inputTaskName;\n\n      if (taskName.length > 3) {\n        _this.setState(function (state, props) {\n          return {\n            tasks: [].concat(_toConsumableArray(state.tasks), [{\n              id: state.tasks.length + 1,\n              name: taskName,\n              isDone: false\n            }])\n          };\n        });\n\n        _this.setState({\n          inputTaskName: \"\"\n        });\n      } else {\n        _this.setState({\n          hasError: true\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          locale = _this$state.locale,\n          appName = _this$state.appName,\n          formName = _this$state.formName,\n          buttonName = _this$state.buttonName,\n          taskListName = _this$state.taskListName,\n          tasks = _this$state.tasks,\n          inputTaskName = _this$state.inputTaskName,\n          hasError = _this$state.hasError;\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, React.createElement(Header, {\n        appName: appName,\n        locale: locale,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, React.createElement(AddNewTask, Object.assign({\n        formName: formName,\n        hasError: hasError,\n        inputTaskName: inputTaskName,\n        buttonName: buttonName,\n        inputTaskNameHandler: this.inputTaskNameHandler,\n        submitCreateNewTask: this.submitCreateNewTask\n      }, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      })), React.createElement(AddNewTask, Object.assign({\n        formName: formName,\n        hasError: hasError,\n        inputTaskName: inputTaskName,\n        buttonName: buttonName,\n        inputTaskNameHandler: this.inputTaskNameHandler,\n        submitCreateNewTask: this.submitCreateNewTask\n      }, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"col-12 Task__List\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        className: \"h3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, taskListName), tasks.map(function (el) {\n        return React.createElement(\"div\", {\n          className: \"card my-2 Task__Item \".concat(el.isDone ? \"bg-secondary text-white\" : \"\"),\n          key: el.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"card-body\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }, React.createElement(\"h5\", {\n          className: \"card-title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        }, el.name), el.isDone ? null : React.createElement(\"button\", {\n          className: \"btn btn-primary\",\n          onClick: function onClick() {\n            _this2.setDone(el.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        }, \"Done\")));\n      })))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport { App as default };\n;","map":{"version":3,"sources":["/home/alex/Desktop/Web developer/JS/react/src/App.js"],"names":["React","Component","Fragment","Header","AddNewTask","App","state","locale","appName","en","ru","formName","buttonName","taskListName","tasks","id","name","isDone","inputTaskName","hasError","setDone","setState","map","el","inputTaskNameHandler","e","value","target","submitCreateNewTask","preventDefault","taskName","length","props"],"mappings":"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","sourcesContent":["import React, { Component,Fragment } from 'react';\n\nimport './App.css';\n\nimport Header from './components/Header'\nimport AddNewTask from './components/AddNewTask'\n\nexport default class App extends Component {\n\n    state = {\n        locale: \"en\",\n        appName: {en: \"Task manager\", ru: \"Менеджер задач\"},\n        formName: \"Add new task\",\n        buttonName: \"Add new task\",\n        taskListName: \"Tasks list\",\n        tasks: [\n            {id: 1, name:\"Wake up\", isDone:false},\n            {id: 2, name:\"Clean your teeth\", isDone:false},\n        ],\n        inputTaskName: \"\",\n        hasError: false\n    };\n\n    render(){\n        const { locale, appName, formName, buttonName, taskListName, tasks, inputTaskName, hasError } = this.state;\n\n        return (\n            <Fragment>\n                <Header appName={appName} locale={locale}/>\n\n                <div className=\"container\">\n                    <div className=\"row\">\n\n                        <AddNewTask {...{\n                            formName,\n                            hasError,\n                            inputTaskName,\n                            buttonName,\n                            inputTaskNameHandler:this.inputTaskNameHandler,\n                            submitCreateNewTask:this.submitCreateNewTask\n                        }} />\n\n                        <AddNewTask {...{\n                            formName,\n                            hasError,\n                            inputTaskName,\n                            buttonName,\n                            inputTaskNameHandler:this.inputTaskNameHandler,\n                            submitCreateNewTask:this.submitCreateNewTask\n                        }} />\n\n\n                        <div className=\"col-12 Task__List\">\n                            <h2 className=\"h3\">{ taskListName }</h2>\n\n                            {\n                                tasks.map(el => (\n                                    <div\n                                        className={`card my-2 Task__Item ${(el.isDone?\"bg-secondary text-white\":\"\")}`} key={el.id}>\n                                        <div className=\"card-body\">\n                                            <h5 className=\"card-title\">{ el.name }</h5>\n                                            {\n                                                el.isDone?\n                                                    null\n                                                    :\n                                                    <button className=\"btn btn-primary\"\n                                                            onClick={() => {this.setDone(el.id)}}>Done</button>\n                                            }\n                                        </div>\n                                    </div>\n                                ))\n                            }\n\n                        </div>\n                    </div>\n                </div>\n            </Fragment>\n        );\n    }\n\n    setDone = (id) => {\n        const {tasks} = this.state;\n        this.setState({\n            tasks: tasks.map(el => el.id === id?{...el, isDone:true}:el)\n        });\n    };\n\n    inputTaskNameHandler = (e) => {\n        const {value} = e.target;\n\n        this.setState({\n            inputTaskName: value,\n            hasError: false\n        });\n    };\n\n    submitCreateNewTask = (e) => {\n        e.preventDefault();\n        const taskName = this.state.inputTaskName;\n\n        if(taskName.length > 3){\n            this.setState((state, props) => ({\n                tasks: [...state.tasks, {id:state.tasks.length+1, name: taskName, isDone:false}]\n            }));\n            this.setState({\n                inputTaskName: \"\"\n            });\n        }else {\n            this.setState({\n                hasError: true\n            });\n        }\n\n    };\n};\n"]},"metadata":{},"sourceType":"module"}